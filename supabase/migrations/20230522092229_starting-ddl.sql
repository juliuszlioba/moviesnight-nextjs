CREATE TABLE posts (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	mediatype VARCHAR,
	tmdbid INT,
	poster VARCHAR,
	title VARCHAR,
	year SMALLINT,
	slug VARCHAR NOT NULL,
	linkanime BOOLEAN DEFAULT false,
	rating SMALLINT,
	recommendation VARCHAR,
	review VARCHAR,
	createdat timestamptz DEFAULT CURRENT_TIMESTAMP,
	updatedat timestamptz DEFAULT CURRENT_TIMESTAMP,
	watchedat timestamptz DEFAULT CURRENT_TIMESTAMP,
	recommended BOOLEAN DEFAULT false
);

CREATE POLICY "Enable read posts for all users"
ON "public"."posts"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Enable all methods for authenticated users only"
ON "public"."posts"
AS PERMISSIVE FOR ALL
TO authenticated
USING (true);

ALTER TABLE "public"."posts" ENABLE ROW LEVEL SECURITY;

CREATE TABLE ganres (
	id int generated by DEFAULT as identity primary key,
	slug varchar NOT NULL UNIQUE,
	title varchar
);

CREATE POLICY "Enable read posts for all users"
ON "public"."ganres"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Enable all methods for authenticated users only"
ON "public"."ganres"
AS PERMISSIVE FOR ALL
TO authenticated
USING (true);

ALTER TABLE "public"."ganres" ENABLE ROW LEVEL SECURITY;

CREATE TABLE posts_ganres (
	id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	post_id BIGINT REFERENCES posts ON DELETE CASCADE NOT NULL,
	ganre_id INT REFERENCES ganres ON DELETE CASCADE NOT NULL
);

CREATE POLICY "Enable read posts for all users"
ON "public"."posts_ganres"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Enable all methods for authenticated users only"
ON "public"."posts_ganres"
AS PERMISSIVE FOR ALL
TO authenticated
USING (true);

ALTER TABLE "public"."posts_ganres" ENABLE ROW LEVEL SECURITY;

CREATE TABLE list_anime_top (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	list bigint[]
);

CREATE POLICY "Enable read posts for all users"
ON "public"."list_anime_top"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Enable all methods for authenticated users only"
ON "public"."list_anime_top"
AS PERMISSIVE FOR ALL
TO authenticated
USING (true);

ALTER TABLE "public"."list_anime_top" ENABLE ROW LEVEL SECURITY;

CREATE TABLE list_movies_top (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	list bigint[]
);

CREATE POLICY "Enable read posts for all users"
ON "public"."list_movies_top"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Enable all methods for authenticated users only"
ON "public"."list_movies_top"
AS PERMISSIVE FOR ALL
TO authenticated
USING (true);

ALTER TABLE "public"."list_movies_top" ENABLE ROW LEVEL SECURITY;

CREATE TABLE list_series_top (
	id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	list bigint[]
);

CREATE POLICY "Enable read posts for all users"
ON "public"."list_series_top"
AS PERMISSIVE FOR SELECT
TO public
USING (true);

CREATE POLICY "Enable all methods for authenticated users only"
ON "public"."list_series_top"
AS PERMISSIVE FOR ALL
TO authenticated
USING (true);

ALTER TABLE "public"."list_series_top" ENABLE ROW LEVEL SECURITY;

create or replace function list_anime_top()
returns table (
  id bigint,
	mediaType varchar,
	tmdbId int,
	poster varchar,
	title varchar,
	year smallint,
	slug varchar,
	linkAnime boolean,
	rating smallint,
	recommendation varchar,
	review varchar,
	createdAt timestamptz,
	updatedAt timestamptz,
	watchedAt timestamptz
)
language sql
AS
$$
  select p.id, mediaType, tmdbId, poster, title, year, slug, linkAnime, rating, recommendation, review, createdAt, updatedAt, watchedAt from (select unnest(list) as post_id from list_anime_top) as l left join posts as p on l.post_id = p.id;
$$;

create or replace function list_movies_top()
returns table (
  id bigint,
	mediaType varchar,
	tmdbId int,
	poster varchar,
	title varchar,
	year smallint,
	slug varchar,
	linkAnime boolean,
	rating smallint,
	recommendation varchar,
	review varchar,
	createdAt timestamptz,
	updatedAt timestamptz,
	watchedAt timestamptz
)
language sql
AS
$$
  select p.id, mediaType, tmdbId, poster, title, year, slug, linkAnime, rating, recommendation, review, createdAt, updatedAt, watchedAt from (select unnest(list) as post_id from list_movies_top) as l left join posts as p on l.post_id = p.id;
$$;

create or replace function list_series_top()
returns table (
  id bigint,
	mediaType varchar,
	tmdbId int,
	poster varchar,
	title varchar,
	year smallint,
	slug varchar,
	linkAnime boolean,
	rating smallint,
	recommendation varchar,
	review varchar,
	createdAt timestamptz,
	updatedAt timestamptz,
	watchedAt timestamptz
)
language sql
AS
$$
  select p.id, mediaType, tmdbId, poster, title, year, slug, linkAnime, rating, recommendation, review, createdAt, updatedAt, watchedAt from (select unnest(list) as post_id from list_series_top) as l left join posts as p on l.post_id = p.id;
$$;

create or replace function list_anime_top_position(id bigint)
returns int
language sql
AS
$$
	select array_position((select list from list_anime_top), id);
$$;